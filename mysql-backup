#!/bin/bash

# mysql-backup --- Backup mysql databases
# Copyright © 2010 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>
# Last changed: 2013-04-04 11:31:36

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

VERSION="1.9"

# Default values just in case of...

# Backup options
BACKUP_DIR=/var/backups/mysql
DATABASES="ALL"
IGNORE_DATABASES=(information_schema)
COMPRESSION=gzip
COMPRESSION_OPTS=
DAILY_RETENTION=7
WEEKLY_DAY="1"
WEEKLY_RETENTION=35
MONTHLY_DAY="01"
MONTHLY_RETENTION=365
HOST=

LVM_SNAPSHOT_SIZE="10G"
LVM_EXT="_bkp"

LVCREATE_OPTS="--chunksize=256"
LVREMOVE_OPTS="-f"
TARGET_MOUNT="/tmp/mysql-snapshot"

# Dump hooks
pre_dump_backup_hook=
post_dump_backup_hook=
pre_dump_restore_hook=
post_dump_restore_hook=

# Snapshot hooks
pre_snapshot_backup_hook=
post_snapshot_backup_hook=
pre_snapshot_backup_lvm_snaphost_hook=
post_snapshot_backup_lvm_snaphost_hook=
pre_snapshot_backup_archive_hook=
post_snapshot_backup_archive_hook=


# mysql / mysqldump default configuration
batch=1
skip_column_names=1
quote_names=1
opt=1
add_drop_database=1

# Commands
mysql=$(which mysql)
mysqldump=$(which mysqldump)
sed=$(which sed)
sort=$(which sort)
uniq=$(which uniq)
tail=$(which tail)
run_parts=$(which run-parts)
lvcreate=$(which lvcreate)
lvremove=$(which lvremove)
lvdisplay=$(which lvdisplay)
mount=$(which mount)
umount=$(which umount)
tar=$(which tar)
tar_opts=""

# Useful variables
mysql_cli=
mysqldump_cli=
compression_cli=
extract_cli=
backup_extension=

# Command line options
cli_config=
cli_verbose=

quiet="> /dev/null 2>&1"


RET=

# Load default values
for f in /etc/mysql-backup/default.cnf ~/.mysql-backup.cnf .mysql-backup.cnf; do
    if test -r ${f}; then
	source ${f}
    fi
done

function die() {
  echo "$@" >&2
  exit 1
}

function log() {
    d=$(dirname "${backup_log}")
    test -d "${d}" || mkdir "${d}"
    test -z "${dry_run}" &&  echo "$(date +'%F %T') $*" >> "${backup_log}"
    test -n "${cli_verbose}" && echo "$(date +'%F %T') $*"
}

function cmd() {
    test -n "${cli_verbose}" -o -n "${dry_run}" && echo "$*"
    test -z "${dry_run}" && eval "$*"
}

function run_hook() {
    hook=$1

    if test -n "${!hook}" -a -d "${!hook}"; then
	log "Running hook ${hook}"
	${run_parts} "${!hook}"
    fi
}



function usage() {
    exit_code=${1:-1}
    cat <<EOF
mysql-backup Version ${VERSION}
Copyright © 2010 Sébastien Gross <seb•ɑƬ•chezwam•ɖɵʈ•org>

$0 [ options ] command [ command options ]

Options:

  -c|--config   CONF   The configuration file to use instead of default.
  -v|--verbose         Run in verbose mode.
  -h|--help            This help screen.

Commands:

  dump               Do a dump backups
    --dry-run          Only print what would be done.

  restore            Restore a backup
    --dry-run          Only print what would be done.
    --date      DATE   Restore backup for a given date.
    --bases     BASES  Restore backup for a given set of bases.

  snapshot           Do a LVM snapshot
    --dry-run          Only print what would be done.
    --no-archive       Just snapshot, do not archive.
EOF
    exit ${exit_code}
}

# Parse the command line
command=
while test $# != 0 && test -z "$command"; do
    case "$1" in
	dump|backup|restore|snapshot) command=$1;;
        -c|--config)
            test -z "$2" && die "Need a parameter for $1."
            cli_config=$2
            shift
            ;;
        -v|--verbose) cli_verbose=1 ;;
        --help|-h) usage 0 ;;
	--) shift; break ;;
        -*|*) usage ;;
    esac
    shift
done

# Finally load configuration file.
if test -r "${cli_config}"; then
    source "${cli_config}"
fi

backup_dir="${BACKUP_DIR}/${HOST}"
backup_log="/var/log/mysql-backup/${HOST}.log"

# Build mysql command line
function build_mysql_cli() {
    RET="${mysql}"
    # missing help table version
    for v in auto-rehash batch column-names column-type-info comments \
	compress debug-check debug-info disable-named-commands force \
	html ignore-spaces line-numbers named-commands no-auto-rehash \
	no-beep no-named-commands no-pager no-tee one-database quick \
	raw reconnect safe-updates i-am-a-dummy secure-auth show-warnings \
	sigint-ignore silent skip-column-names skip-line-numbers unbuffered \
	verbose vertical wait xml ; do
	V=${v//-/_}
	test -z "${!V}" || RET="${RET} --${v}"
    done
    # Missing databases execute pipe
    for v in character-sets-dir debug default-character-set delimiter host \
	local-infile pager password port prompt protocol socket tee user ; do
	V=${v//-/_}
	test -z "${!V}" || RET="${RET} --${v}=${!V}"
    done
    mysql_cli=${RET}
}

# Build mysql dump command line
function build_mysqldump_cli() {
    RET="${mysqldump}"
    # missing help pipe table version 
    for v in add-drop-database add-drop-table add-locks allow-keywords \
	comments compact complete-insert compress create-options \
	debug-check debug-info delayed-insert delete-master-logs disable-keys \
	dump-date events extended-insert flush-logs flush-privileges force \
	hex-blob insert-ignore lock-all-tables lock-tables \
	no-autocommit no-create-db no-create-info no-data no-set-names opt \
	order-by-primary quick quote-names replace routines set-charset \
	single-transaction skip-comments skip-opt triggers tz-utc verbose xml ; do
	V=${v//-/_}
	test -z "${!V}" || RET="${RET} --${v}"
    done
    # Missing database ignore-table  ssl*
    for v in character-sets-dir compatible debug default-character-set \
	fields-terminated-by fields-enclosed-by fields-optionally-enclosed-by \
	fields-escaped-by host lines-terminated-by log-error master-data \
	password port protocol result-file socket tab user where; do
	V=${v//-/_}
	test -z "${!V}" || RET="${RET} --${v}=${!V}"
    done
    mysqldump_cli=${RET}
}

# list databases to backup
function find_db () {
    if test "${DATABASES}" == "ALL"; then
	dbs=$(${mysql_cli} -e "SHOW DATABASES" | ${sed} 's/ /%/g')
    fi
    DATABASES=""
    # Check is database is in the ignore list, then remove it from DATABASES.
    for db in ${dbs}; do
	skip_this_db=
	for i in ${IGNORE_DATABASES[@]}; do
	    if test ${db} == ${i}; then
		skip_this_db=1
	    fi
	done
	if test -z "${skip_this_db}"; then
	    DATABASES="${DATABASES} ${db}"
	fi
    done
}

function build_compression_cli () {
    local extension_prefix=

    case ${command} in
	snapshot)
	    # Snapshots are always tar based
	    extension_prefix="tar"
	    ;;
	dump|backup|restore)
	    extension_prefix="sql"
	    ;;
    esac

    case ${COMPRESSION} in
	gzip) 
	    compression_cli="${COMPRESSION}"
	    extract_cli=$(which zcat)
	    backup_extension=".gz"
	    ;;
	bzip2)
	    compression_cli="${COMPRESSION}"
	    extract_cli=$(which bzcat)
	    backup_extension=".bz2"
	    ;;
	xz)
	    compression_cli="${COMPRESSION}"
	    extract_cli=$(which xzcat)
	    backup_extension=".xz"
	    ;;
	*) 
	    compression_cli=$(which cat)
	    extract_cli=$(which cat)
	    backup_extension=""
	    ;;
    esac
    backup_extension="${extension_prefix}${backup_extension}"
}

function get_backup_file () {
    db=${1}
    ignore_extention=${2}
    timestamp=$(date +%F)
    if test -n "${ignore_extention}"; then
	RET="${db}_${timestamp}"
    else
	RET="${db}_${timestamp}.${backup_extension}"
    fi
}


function cmd_dump() {
    find_db
    local dry_run=
    local bkp_dir="${backup_dir}/dump"

    while test $# -ne 0; do
	case "$1" in
	    --dry-run) dry_run=1 ;;
	    --) shift ; break ;;
	    -*|*) help 0 ;;
	esac
	shift
    done

    log "DAILY backup start"
    run_hook pre_dump_backup_hook

    # Backup status too
    get_backup_file "show-master-status" 1
    local master_status=${RET}
    get_backup_file "show-slave-status" 1
    local slave_status=${RET}
    get_backup_file _binlogs
    backup_file=${RET}


    local mysql_query=$(cat <<EOF
SLAVE STOP;
FLUSH TABLES WITH READ LOCK;
system ${mysql_cli} --column-names -e "SHOW MASTER STATUS\G" > ${bkp_dir}/daily/${master_status}
system ${mysql_cli} --column-names -e "SHOW SLAVE STATUS\G" >  ${bkp_dir}/daily/${slave_status}
system cd /var/lib/mysql && tar -czf ${bkp_dir}/daily/${backup_file} mysqld*.* master.info show-*status relay-log.info
UNLOCK TABLES;
SLAVE START IO_THREAD;
EOF
    )

    # backup binlogs
    cmd "echo '${mysql_query}' | ${mysql_cli}"
    archive_bkps "${bkp_dir}" "${backup_file}" "Dump $(hostname)"

    for db in ${DATABASES}; do
	for t in daily weekly monthly; do
	    mkdir -p "${bkp_dir}/${t}"
	done
	log "${db} start"
	run_hook pre_dump_backup_hook_${db}
	get_backup_file ${db}
	backup_file=${RET}
	cmd "${mysqldump_cli} --databases ${db} | \
            ${compression_cli} > '${bkp_dir}/daily/${backup_file}'"

	archive_bkps "${bkp_dir}" "${backup_file}" "Dump $(hostname)"

	run_hook post_dump_backup_hook_${db}
	log "${db} done"
    done

    mysql_query=$(cat <<EOF
SLAVE START;
EOF
    )
    cmd "echo '${mysql_query}' | ${mysql_cli}"

    run_hook post_dump_backup_hook
    log "DAILY backup done"
}

function cmd_backup () {
    log "backup function is deprecated and would be soon removed. Please use dump command instead."
    cmd_dump "$@"
}


# do archive backups
# $1 => root directory for backups
# $2 => backup file name
# $3 => db name (for loggin purposes
function archive_bkps () {
    local bkp_dir="$1"
    local backup_file="$2"
    local db="$3"

    # Keep weekly archives
    if test "$(date +%w)" == "${WEEKLY_DAY}"; then
	log "${db} weekly"
	cmd ln -f "${bkp_dir}/daily/${backup_file}" "${bkp_dir}/weekly/${backup_file}"
    fi
    # remove old weekly archives
    cmd "find '${bkp_dir}/weekly' -type f -mtime +${WEEKLY_RETENTION} -print0 | \
	xargs -0 --no-run-if-empty rm"
    # Keep monthly archives
    if test "$(date +%d)" == "${MONTHLY_DAY}"; then
	log "${db} monthly"
	cmd ln -f "${bkp_dir}/daily/${backup_file}" "${bkp_dir}/monthly/${backup_file}"
    fi
    # remove old monthly archives
    cmd "find '${bkp_dir}/monthly' -type f -mtime +${MONTHLY_RETENTION} -print0 | \
	xargs -0 --no-run-if-empty rm"
    # remove old daily archives
    cmd "find '${bkp_dir}/daily' -type f -mtime +${DAILY_RETENTION} -print0 | \
	xargs -0 --no-run-if-empty rm"
}



function cmd_snapshot () {
    local _datadir=$(${mysql_cli} -e "SHOW VARIABLES LIKE 'datadir'" \
	| sed -e 's,\(^datadir[[:space:]]\+\|/$\),,g')
    test -z "${_datadir}" && die "Cannot connect to mysql server"
    local datadir=$(readlink ${_datadir})
    if test -z "${datadir}"; then
	datadir="${_datadir}"
    fi
    local mountpoint=$(df -P ${datadir} | awk '{if(NF==6){print $NF}}')
    local datadir_dev=$(df -P ${datadir} | awk '{if(NF==6){print $1}}' \
	| xargs ${lvdisplay} -c  | cut -d: -f1)

    if test -z "${datadir}"; then
	die "LVM not installed or LVM commands not found or ${datadir} is not in LVM."
    fi

    local lvm_snapshot="${datadir_dev}${LVM_EXT}"
    local fs_type=$(mount | sed -n "s,.* on ${mountpoint} type \([^[:space:]]\+\).*,\1,p")
    local mount_opts="-o ro,noexec,nosuid,nodev"
    if test "${fs_type}" == "xfs"; then
	mount_opts="${mount_opts} -o nouuid"
	# Do not freeze XFS since LVM change a mount: unknown filesystem
	# type 'DM_snapshot_cow' error happens
    fi

    local datadir_path=$(echo "${datadir}" | sed -e "s,^${mountpoint}/\?,,")

    get_backup_file "$(hostname)"
    local snapshot_file=${RET}
    local bkp_dir="${backup_dir}/snapshot"
    local mysql_query=

    local no_archive=

    while test $# -ne 0; do
	case "$1" in
	    --dry-run) dry_run=1 ;;
	    --no-archive) no_archive=1;;
	    --) shift ; break ;;
	    -*|*) help 0 ;;
	esac
	shift
    done

    test -z "${dry_run}" && log "DAILY snapshot start"

    if test -n "${dry_run}"; then
	cat<<EOF
datadir       = ${datadir}
mountpoint    = ${mountpoint}
datadir_dev   = ${datadir_dev}
datadir_path  = ${datadir_path}
lvm_snapshot  = ${lvm_snapshot}
fs_type       = ${fs_type}
mount_opts    = ${mount_opts}
EOF
    fi

    run_hook pre_snapshot_backup_hook

    ${lvdisplay} -c | grep -F ${lvm_snapshot} > /dev/null 2>&1
    if test $? -eq 0; then
	cmd ${umount} ${TARGET_MOUNT} ${quiet}
	cmd ${lvremove} ${LVREMOVE_OPTS} ${lvm_snapshot} ${quiet}
    fi

    run_hook pre_snapshot_backup_lvm_snaphost_hook

    mysql_query=$(cat <<EOF
SLAVE STOP;
FLUSH TABLES WITH READ LOCK;
system ${mysql_cli} --column-names -e "SHOW MASTER STATUS\G" > ${datadir}/show-master-status
system ${mysql_cli} --column-names -e "SHOW SLAVE STATUS\G" > ${datadir}/show-slave-status
system ${lvcreate} -s --size ${LVM_SNAPSHOT_SIZE} -n ${lvm_snapshot} ${LVCREATE_OPTS} ${datadir_dev} > /dev/null 2>&1
UNLOCK TABLES;
SLAVE START;
EOF
    )

    cmd "echo '${mysql_query}' | ${mysql_cli}"
    run_hook post_snapshot_backup_lvm_snaphost_hook

    cmd mkdir -p ${TARGET_MOUNT}
    cmd ${mount} ${mount_opts} ${lvm_snapshot} ${TARGET_MOUNT}

    for t in daily weekly monthly; do
	cmd mkdir -p "${bkp_dir}/${t}"
    done

    if test -z "${no_archive}"; then
	run_hook pre_snapshot_backup_archive_hook
	cmd "${tar} ${tar_opts} -C ${TARGET_MOUNT}/${datadir_path} -c -f - . | \
            ${compression_cli} ${compression_opts} > ${bkp_dir}/daily/${snapshot_file}"
	archive_bkps "${bkp_dir}" "${snapshot_file}" "Snapshot $(hostname)"
	run_hook post_snapshot_backup_archive_hook
	cmd ${umount} ${TARGET_MOUNT} ${quiet}
	cmd ${lvremove} ${LVREMOVE_OPTS} ${lvm_snapshot} ${quiet}
    else
	if test -z "${dry_run}"; then
	    cat <<EOF
A snapshot image is available in ${TARGET_MOUNT}

When done, you can remove it using:

${umount} ${TARGET_MOUNT}
${lvremove} ${LVREMOVE_OPTS} ${lvm_snapshot}

EOF
	fi
	
    fi

    run_hook post_snapshot_backup_hook
    log "DAILY snapshot done"
}

# This has to be done
function cmd_restore() {
    local dry_run=
    local date=
    local bases=
    local bkp_dir="${backup_dir}/dump"

    while test $# -ne 0; do
	case "$1" in
	    --dry-run) dry_run=1 ;;
	    --date) test -z "$2" && die "Need a parameter for $1."
		date=$2
		shift
		;;
	    --bases) test -z "$2" && die "Need a parameter for $1."
		bases=$2
		shift
		;;
	    --) shift ; break ;;
	    -*|*) help 0 ;;
	esac
	shift
    done

    if test -z "${date}"; then
	date=$(find "${bkp_dir}" -type f -name '*.sql*' | \
	    ${sed} -n 's,^.*/[^/]\+_\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}\)[^/]*$,\1,p' | \
	    ${sort} | ${tail} -n1)
    fi

    if test -z "${bases}"; then
	bases=$(find "${bkp_dir}" -type f -name '*.sql*' | \
	    ${sed} -n 's,^.*/\([^/]\+\)_[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}[^/]*$,\1,p' | \
	    ${sort} | ${uniq} )
    fi
    test -z "${dry_run}" && run_hook pre_dump_restore_hook
    for base in ${bases}; do
	file_to_restore=
	for t in daily weekly monthly; do
	    file_to_restore="${bkp_dir}/${t}/${base}_${date}.${backup_extension}"
	    if test -r "${file_to_restore}"; then
		break
	    else
		file_to_restore=
	    fi
	done
	if test -z "${file_to_restore}"; then
	    echo "Could not find a backup archive for ${base} on ${date}."
	    continue
	fi
	if test -n "${dry_run}"; then
	    echo "${extract_cli} \"${file_to_restore}\" | ${mysql_cli}"
	else
	    ### COPY PREVIOUS LINE WITHOUT ECHO
	    run_hook pre_dump_restore_hook_${base}
	    log "Restoring ${base} from ${date} on ${HOST}."
	    echo "DO REAL RESTORE"
	    log "Restoring ${base} from ${date} on ${HOST} done."
	    run_hook post_dump_restore_hook_${base}
	fi
    done
    test -z "${dry_run}" && run_hook post_dump_restore_hook
}


# main

build_mysql_cli
build_mysqldump_cli
build_compression_cli

test -z "${command}" && die "No command specified"
"cmd_${command}" "$@"

exit
